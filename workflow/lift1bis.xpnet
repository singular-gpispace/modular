<defun name="lift1">
    <include-structs href="structures.xpnet"/>
    
    <require key="worker" mandatory="true"/>
    <in name="place_in" type="modular_data" place="place_in"/>
    <tunnel name="place_base_filename" type="string" place="place_base_filename"/>
    <tunnel name="place_implementation" type="string" place="place_implementation"/>
    <tunnel name="place_needed_library" type="string" place="place_needed_library"/>
    <tunnel name="place_function_name_lift" type="string" place="place_function_name_lift"/>
    <tunnel name="place_out" type="modular_data" place="place_out"/>

    <tunnel name="place_bal" type ="control" place="place_bal"/>

    <net>
        <place name="place_in" type="modular_data"/>
        <place name="place_out" type="modular_data" virtual="true"/>
        <place name="place_base_filename" type="string" virtual="true"/>
        <place name="place_implementation" type="string" virtual="true"/>
        <place name="place_needed_library" type="string" virtual="true"/>
        <place name="place_function_name_lift" type="string" virtual="true"/>
        <place name="place_bal" type="control" virtual="true"/>

        <place name="place_counter" type="long">
            <token><value>0L</value></token>
        </place>
        <place name="place_mod_res" type="modular_data"/>
        <place name="place_after_count" type="modular_data"/>
        <place name="place_right" type="modular_data"/>
        <place name="place_left" type="modular_data"/>
        <place name="place_up" type="control"><token><value>[]</value></token></place>
        <place name="place_down" type="control"/>
        <place name="place_after_lift" type="modular_data"/>

        <transition name="count">
            <defun>
                <in name="in" type="modular_data"/>
                <inout name="ct" type="long"/>
                <out name="after_count" type="modular_data"/>
                <expression>
                    ${ct} := ${ct} + 1L;
                    ${after_count} := ${in};
                </expression>
            </defun>
            <connect-in port="in" place="place_in"/>
            <connect-inout port="ct" place="place_counter"/>
            <connect-out port="after_count" place="place_after_count"/>
        </transition>

        <transition name="sleep">
            <defun>
                <in name="after_count" type="modular_data"/>
                <out name="mod_res" type="modular_data"/>
                <module name="singular_modular"
                    require_function_unloads_without_rest="false"
                    function="sleep(after_count,mod_res)">
                    <code><![CDATA[
                        mod_res = after_count;
                    ]]>
                    </code>
                </module>
            </defun>
            <connect-in port="after_count" place="place_after_count"/>
            <connect-out port="mod_res" place="place_mod_res"/>
        </transition>

        <transition name="lhs">
            <defun>
                <in name="mod_res" type="modular_data"/>
                <in name="down" type="control"/>
                <inout name="ct" type="long"/>
                <out name="up" type="control"/>
                <out name="left" type="modular_data"/>
                <expression>
                    ${left} := ${mod_res};
                    ${up} := [];
                    ${ct} := ${ct} - 2L;
                </expression>
            </defun>
            <connect-in port="mod_res" place="place_mod_res"/>
            <connect-in port="down" place="place_down"/>
            <connect-inout port="ct" place="place_counter"/>
            <connect-out port="up" place="place_up"/>
            <connect-out port="left" place="place_left"/>
        </transition>

        <transition name="rhs">
            <defun>
                <in name="mod_res" type="modular_data"/>
                <in name="ct" type="long"/>
                <in name="up" type="control"/>
                <out name="down" type="control"/>
                <out name="right" type="modular_data"/>
                <expression>
                    ${right} := ${mod_res};
                    ${down} := [];
                </expression>
                <condition>
                    ${ct} :ge: 2L
                </condition>
            </defun>
            <connect-in port="mod_res" place="place_mod_res"/>
            <connect-read port="ct" place="place_counter"/>
            <connect-in port="up" place="place_up"/>
            <connect-out port="down" place="place_down"/>
            <connect-out port="right" place="place_right"/>
        </transition>

        <transition name="lift">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="lhs" type="modular_data"/>
                <in name="rhs" type="modular_data"/>
                <in name="function_name" type="string"/>
                <in name="needed_library" type="string"/>
                <in name="implementation" type="string"/>
                <in name="base_filename" type="string"/>
                <out name="out" type="modular_data"/>
                <out name="bal2" type="list"/>
                <module name="singular_modular"
                    require_function_unloads_without_rest="false"
                    function="lift(implementation,lhs,rhs,function_name,needed_library,base_filename,out,bal2)">
                    <cinclude href="share/include/modular_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <cinclude href="iostream"/>
                    <code><![CDATA[
                        if(lhs.hashlead.size() == rhs.hashlead.size())
                        {
                            if(lhs.hashlead == rhs.hashlead)
                            {
                                std::string out_filename = fhg::util::scoped_dlhandle
                                    (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
                                    .sym<decltype (singular_modular_lift)> ("singular_modular_lift")
                                ( lhs.data,rhs.data,function_name,needed_library,base_filename,"1");
                                out.data = out_filename;
                                out.nb_prime = lhs.nb_prime + rhs.nb_prime;
                                out.hashlead = lhs.hashlead;
                            }
                            else
                            {
                                std::cout << "in transition lift1";
                                if(lhs.nb_prime >= rhs.nb_prime)
                                { 
                                    out = lhs;
                                }
                                else
                                {
                                    out = rhs;
                                }
                            }
                        }
                        else
                        {
                            std::cout << "in transition lift1";
                            if(lhs.nb_prime >= rhs.nb_prime)
                            { 
                                out = lhs;
                            }
                            else
                            {
                                out = rhs;
                            }
                        }
                        if(lhs.nb_prime == 1 and rhs.nb_prime == 1)
                        {
                            for (unsigned long i (0); i<2; ++i)
                            {
                                bal2.emplace_back(we::type::literal::control{});
                            }
                        }
                        else
                        {
                                //if(lhs.nb_prime == 1 or rhs.nb_prime ==1)
                                //{
                                    bal2.emplace_back(we::type::literal::control{});
                                //}
                        }
                        ]]>
                    </code>
                </module>
            </defun>
            <connect-in port="lhs" place="place_left"/>
            <connect-in port="rhs" place="place_right"/>
            <connect-read port="implementation" place="place_implementation"/>
            <connect-read port="function_name" place="place_function_name_lift"/>
            <connect-read port="needed_library" place="place_needed_library"/>
            <connect-read port="base_filename" place="place_base_filename"/>
            <connect-out-many port="bal2" place="place_bal"/>
            <connect-out port="out" place="place_after_lift"/>
        </transition>

        <transition name="move_back">
            <defun>
                <in name="after_lift" type="modular_data"/>
                <inout name="ct" type="long"/>
                <out name="mod_res" type="modular_data"/>
                <expression>
                    ${mod_res} := ${after_lift};
                    ${ct} := ${ct} + 1L;
                </expression>
                <condition>
                    ${after_lift.nb_prime} :lt: 10UL
                </condition>
            </defun>
            <connect-in port="after_lift" place="place_after_lift"/>
            <connect-inout port="ct" place="place_counter"/>
            <connect-out port="mod_res" place="place_mod_res"/>
        </transition>

        <transition name="move_out">
            <defun>
                <in name="after_lift" type="modular_data"/>
                <out name="out" type="modular_data"/>
                <expression>
                    ${out} := ${after_lift};
                </expression>
                <condition>
                    ${after_lift.nb_prime} :ge: 10UL
                </condition>
            </defun>
            <connect-in port="after_lift" place="place_after_lift"/>
            <connect-out port="out" place="place_out"/>
        </transition>

        <transition name="extraction">
            <defun>
                <in name="mod_res" type="modular_data"/>
                <inout name="ct" type="long"/>
                <inout name="up" type="control"/>
                <out name="out" type="modular_data"/>
                <expression>
                    ${out} := ${mod_res};
                    ${ct} := ${ct} - 1L;
                    ${up} := [];
                </expression>
                <condition>
                    ${ct} :eq: 1L
                </condition>
            </defun>
            <connect-in port="mod_res" place="place_mod_res"/>
            <connect-inout port="ct" place="place_counter"/>
            <connect-inout port="up" place="place_up"/>
            <connect-out port="out" place="place_out"/>
        </transition>
    </net>
</defun>