LIB "modulargspc.lib";
LIB "random.lib";
LIB "modstd.lib";

configToken gc = configure_gspc();

gc.options.tmpdir = "temp";
gc.options.nodefile = "nodefile";
gc.options.procspernode = 4;
gc.options.loghostfile = "loghostfile";
gc.options.logport = 9876;

configToken pc = configure_modular();

pc.options.library = "modulargp.lib";
pc.options.procCompute = "stdmodp";
pc.options.procLift = "liftt";
pc.options.procReconstest = "reconstest";
pc.options.bal1 = 10;
pc.options.bal2 = 4;

generateIOTokenTypes();

/*ring R = 0,(x,y,z),dp;
//ideal I =  11x7y+3x+1,z4+7;
ideal I = randomid(maxideal(10),10);
I;

token input;
input.fieldnames = list("generators");
input.data = list(I);

list l = list(input);
int num_primes = 200;

intvec primeiv = primeList(I, num_primes);
int i;
list primelists;

token t;
for (i = 1; i <= num_primes; i++)
{
  t.fieldnames = list("int");
  t.data = list(primeiv[i]);
	primelists[i] = t;
}
def re = gspc_modular(l,primelists, gc, pc);
def r = re.r_data;
setring r;
re.data[1];*/
exit;