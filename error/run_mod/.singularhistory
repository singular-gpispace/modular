exit;
exit;
ls
exit;
exit;
;
t;
t.data;
l;
l[1].data;
exit;
exit;
exit;
;
gspc_modular;
std;
gspc_modular(l,p);
gspc_modular();
hello();
hello(p,l);
ls
exit;
;
sggspc_modular(l,p);
sggspc_modular(l, p,  tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, gc.options.addargs
;
sggspc_modular(l, p,  tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, gc.options.addargs,pc.options.libGenerate,pc.options.procGenerate);
sggspc_modular(l, p,  tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, gc.options.addargs,pc.options.libGenerate,pc.options.procGenerate);
sggspc_modular(l, primelists,  tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, gc.options.addargs,pc.options.libGenerate,pc.options.procGenerate);
sggspc_modular(l, primelists,  gc.options.tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, gc.options.addargs,pc.options.libGenerate,pc.options.procGenerate);
sggspc_modular(l, p,  tmpdir, gc.options.nodefile, gc.options.procspernode, gc.options.rifstrategy, gc.options.addargs,pc.options.libGenerate,pc.options.procGenerate);
:q!
;
exit;
exit;
exit;
exit;
exit;
ls
;
ls
exit;
exit;
exit;
ls
exit;
exit
;
exit;
exit;
exit;
exit;
exit;
LIB "modulargp.lib";
generate
;
exit;
exit;
ls
exit;
exit;
exit;
exit;
exit;
exit;
exit;
exit;
ls
ls
exit;
exit;
exit;
ls
exit;
exit;
exit;
exit;
exit;
exit;
exit;
exit;
LIB "";
LIB "standard.lib";
exit
;
:q!
exit;
exit;
exit;
exit;
exit;
exit;
;
exit;
exit;
exit;
exit;
exit;
exit;
ls
exit;
ls
exit;
exit;
ls
cd ..
ls
exit;
exit;
exit;
exit;
exit;
exit;
exit
;
exit
;
exit;
exit;
exit;
exit;
exit;
exit;
exit;
exit
;
exit;
exit;
exit;
exit;
exit;
exit;
exit;
exit;
exit;
