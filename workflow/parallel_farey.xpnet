<defun name="parallel_farey">
    <require key="worker" mandatory="true"/>
    <tunnel name="place_bal3" type="bool" place="place_bal3"/>
    <tunnel name="place_lifted_res" type="modular_data" place="place_lifted_res"/>
    <tunnel name="place_implementation" type="string" place="place_implementation"/>
    <tunnel name="place_base_filename" type="string" place="place_base_filename"/>
    <tunnel name="place_needed_library" type="string" place="place_needed_library"/>
    <tunnel name="place_function_name_split" type="string" place="place_function_name_split"/>
    <tunnel name="place_function_name_farey" type="string" place="place_function_name_farey"/>
    <tunnel name="place_function_name_append" type="string" place="place_function_name_append"/>
    <tunnel name="place_result_farey" type="result_bool_type" place="place_result_farey"/>
    
    <net>
        <place name="place_bal3" type="bool" virtual="true"/>
        <place name="place_lifted_res" type="modular_data" virtual="true"/>
        <place name="place_split_generators" type="string"/>
        <place name="place_lift_info" type="chr_lift_info"/>
        <place name="place_total_generator" type="unsigned long"/>
        <place name="place_reconstruction" type="generator_data"/>
        <place name="place_right" type="generator_data"/>
        <place name="place_left" type="generator_data"/>
        <place name="place_up" type="control">
            <token>
                <value>[]</value>
            </token>
        </place>
        <place name="place_down" type="control"/>
        <place name="place_implementation" type="string" virtual="true"/>
        <place name="place_base_filename" type="string" virtual="true"/>
        <place name="place_needed_library" type="string" virtual="true"/>
        <place name="place_function_name_farey" type="string" virtual="true"/>
        <place name="place_function_name_split" type="string" virtual="true"/>
        <place name="place_function_name_append" type="string" virtual="true"/>
        <place name="place_result_farey" type="result_bool_type" virtual="true"/>

        <transition name="split">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="in" type="modular_data"/>
                <in name="implementation" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="needed_library" type="string"/>
                <in name="function_name" type="string"/>
                <inout name="bal3" type="bool"/>
                <out name="lift_info" type="chr_lift_info"/>
                <out name="total_generator" type="unsigned long"/>
                <out name="generators" type="list"/>
                <module name="singular_modular"
                    require_function_unloads_without_rest="false"
                    function="split(implementation,base_filename,needed_library,in, function_name,lift_info,total_generator,generators,bal3)">
                    <cinclude href="share/include/modular_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <cinclude href="vector"/>
                    <cinclude href="iostream"/>
                    <code><![CDATA[
                        std::cout << "in singular _.._farey" << std::endl;
                        std::pair<std::vector<std::string>, unsigned long> out = fhg::util::scoped_dlhandle
                         (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
                         .sym<decltype (singular_modular_split)> ("singular_modular_split")
                         ( in.data,function_name, needed_library,base_filename);
                        total_generator = out.second;
                        lift_info.chr_lift = in.data;
                        lift_info.nb_prime = in.nb_prime;
                        lift_info.hashlead = in.hashlead;
                        for(int i (0); i<out.first.size(); i++)
                        {
                            generators.emplace_back(out.first[i]);
                        }
                        bal3 = 1;
                        ]]>
                    </code>
                </module>
            </defun>
            <connect-in port="in" place="place_lifted_res"/>
            <connect-read port="implementation" place="place_implementation"/>
            <connect-read port="base_filename" place="place_base_filename"/>
            <connect-read port="needed_library" place="place_needed_library"/>
            <connect-read port="function_name" place="place_function_name_split"/>
            <connect-inout port="bal3" place="place_bal3"/>
            <connect-out port="lift_info" place="place_lift_info"/>
            <connect-out-many port="generators" place="place_split_generators"/>
            <connect-out port="total_generator" place="place_total_generator"/>
        </transition>

        <transition name="farey">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="generator" type="string"/>
                <in name="implementation" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="needed_library" type="string"/>
                <in name="function_name" type="string"/>
                <out name="out" type="generator_data"/>
                <module name="singular_modular"
                    require_function_unloads_without_rest="false"
                    function="reconst(implementation,base_filename,needed_library,function_name,generator,out)">
                    <cinclude href="share/include/modular_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <cinclude href="vector"/>
                    <cinclude href="iostream"/>
                    <code><![CDATA[
                       // std::cout << "in singular_.._farey" << std::endl;
                        std::pair<std::string, unsigned long> result = fhg::util::scoped_dlhandle
                         (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
                         .sym<decltype (singular_modular_farey)> ("singular_modular_farey")
                         ( generator,function_name, needed_library,base_filename);
                        out.data = result.first;
                        out.nb_generator=  result.second;
                        ]]>
                    </code>
                </module>
            </defun>
            <connect-in port="generator" place="place_split_generators"/>
            <connect-out port="out" place="place_reconstruction"/>
            <connect-read port="implementation" place="place_implementation"/>
            <connect-read port="base_filename" place="place_base_filename"/>
            <connect-read port="needed_library" place="place_needed_library"/>
            <connect-read port="function_name" place="place_function_name_farey"/>
        </transition>

        <transition name="right">
            <defun>
                <in name="reconst" type="generator_data"/>
                <in name="up" type="control"/>
                <in name="total_generator" type="unsigned long"/>
                <out name="down" type="control"/>
                <out name="right" type="generator_data"/>
                <expression>
                    ${down} := ${up};
                    ${right} := ${reconst};
                </expression>
                <condition>
                    ${reconst.nb_generator} :lt: ${total_generator}
                </condition>
            </defun>
            <connect-in port="reconst" place="place_reconstruction"/>
            <connect-in port="up" place="place_up"/>
            <connect-read port="total_generator" place="place_total_generator"/>
            <connect-out port="down" place="place_down"/>
            <connect-out port="right" place="place_right"/>
        </transition>

        <transition name="left">
            <defun>
                <in name="reconst" type="generator_data"/>
                <in name="down" type="control"/>
                <in name="total_generator" type="unsigned long"/>
                <out name="up" type="control"/>
                <out name="left" type="generator_data"/>
                <expression>
                    ${up} := ${down};
                    ${left} := ${reconst};
                </expression>
                <condition>
                    ${reconst.nb_generator} :lt: ${total_generator}
                </condition>
            </defun>
            <connect-in port="reconst" place="place_reconstruction"/>
            <connect-in port="down" place="place_down"/>
            <connect-read port="total_generator" place="place_total_generator"/>
            <connect-out port="up" place="place_up"/>
            <connect-out port="left" place="place_left"/>
        </transition>

        <transition name="append">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="left" type="generator_data"/>
                <in name="right" type="generator_data"/>
                <in name="implementation" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="needed_library" type="string"/>
                <in name="function_name" type="string"/>
                <out name="out" type="generator_data"/>
                <module name="singular_modular"
                    require_function_unloads_without_rest="false"
                    function="append(implementation,base_filename,needed_library,function_name,left,right,out)">
                    <cinclude href="share/include/modular_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
                    <cinclude href="vector"/>
                    <cinclude href="iostream"/>
                    <code><![CDATA[
                       // std::cout << "in singular_.._append" << std::endl;
                        std::string result = fhg::util::scoped_dlhandle
                         (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
                         .sym<decltype (singular_modular_append)> ("singular_modular_append")
                         ( left.data,right.data,function_name, needed_library,base_filename);
                        out.data = result;
                        out.nb_generator= left.nb_generator + right.nb_generator;
                        ]]>
                    </code>
                </module>
            </defun>
            <connect-in port="left" place="place_left"/>
            <connect-in port="right" place="place_right"/>
            <connect-out port="out" place="place_reconstruction"/>
            <connect-read port="implementation" place="place_implementation"/>
            <connect-read port="base_filename" place="place_base_filename"/>
            <connect-read port="needed_library" place="place_needed_library"/>
            <connect-read port="function_name" place="place_function_name_append"/>
        </transition>

        <transition name="extract_final">
            <defun>
                <in name="reconst" type="generator_data"/>
                <in name="total_generator" type="unsigned long"/>
                <in name="lift_info" type="chr_lift_info"/>
                <out name="bal3" type="bool"/>
                <out name= "out" type="result_bool_type"/>
                <expression>
                    ${out.farey_lift} := ${reconst.data};
                    ${out.chr_lift} := ${lift_info.chr_lift};
                    ${out.test} := false; 
                    ${out.nb_prime} := ${lift_info.nb_prime};
                    ${out.hashlead} := ${lift_info.hashlead};
                    ${bal3} := false;
                </expression>
                <condition>
                    ${reconst.nb_generator}:eq:${total_generator}
                </condition>
            </defun>
            <connect-in port="reconst" place="place_reconstruction"/>
            <connect-in port="total_generator" place="place_total_generator"/>
            <connect-in port="lift_info" place="place_lift_info"/>
            <connect-out port="bal3" place="place_bal3"/>
            <connect-out port="out" place="place_result_farey"/>
        </transition>
    </net>
</defun>
