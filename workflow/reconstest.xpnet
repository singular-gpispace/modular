<defun name="reconstest">
    <require key="worker" mandatory="true"/>
    <in name="lifted_res" type="modular_data" place="place_lifted_res"/>
    <in name="one" type="modular_data" place="place_one"/>
    <in name="implementation" type="string" place="place_implementation"/>
    <in name="base_filename" type="string" place="place_base_filename"/>
    <in name="function_name" type="string" place="place_function_name_reconstest"/>
    <in name="needed_library" type="string" place="place_needed_library"/>
    <out name="out" type="result_bool_type" place="place_out"/>

    <net>
        <place name="place_lifted_res" type="modular_data"/>
        <place name="place_one" type="modular_data"/>
        <place name="place_base_filename" type="string"/>
        <place name="place_implementation" type="string"/>
        <place name="place_needed_library" type="string"/>
        <place name="place_function_name_reconstest" type="string"/>
        <place name="place_out" type="result_bool_type"/>

        <transition name="reconstest">
            <defun>
                <require key="worker" mandatory="true"/>
                <in name="lifted_res" type="modular_data"/>
                <in name="one" type="modular_data"/>
                <in name="implementation" type="string"/>
                <in name="base_filename" type="string"/>
                <in name="function_name" type="string"/>
                <in name="needed_library" type="string"/>
                <out name="out" type="result_bool_type"/>
                <module name="singular_modular"
                    require_function_unloads_without_rest="false"
                    function="reconstest(implementation,lifted_res,one,function_name,needed_library,base_filename,out)">
                    <cinclude href="share/include/modular_interface.hpp"/>
                    <cinclude href="util-generic/dynamic_linking.hpp"/>
		    <cinclude href="iostream"/>
                    <code><![CDATA[  
			std::cout <<  lifted_res.nb_prime << std::endl;
                        if (lifted_res.hashlead.size() == one.hashlead.size()){
                                if (lifted_res.hashlead == one.hashlead ){
                                    std::pair<std::string,bool> pair_result = fhg::util::scoped_dlhandle
                                        (implementation, RTLD_GLOBAL | RTLD_NOW | RTLD_DEEPBIND)
                                        .sym<decltype (singular_modular_reconstest)> ("singular_modular_reconstest")
                                        ( lifted_res.data, one.data,function_name, needed_library,base_filename);
                                    out.farey_lift = pair_result.first;
                                    out.chr_lift = lifted_res.data;
                                    out.hashlead = lifted_res.hashlead;
                                    out.nb_prime = lifted_res.nb_prime;
                                    out.test = pair_result.second;
                                }
                                else{
                                    out.farey_lift = "";
                                    out.chr_lift = lifted_res.data;
                                    out.hashlead = lifted_res.hashlead;
                                    out.nb_prime = lifted_res.nb_prime;
                                    out.test = 0;
                                }
                        }
                        else
                        {
                            out.farey_lift = "";
                            out.chr_lift = lifted_res.data;
                            out.hashlead = lifted_res.hashlead;
                            out.nb_prime = lifted_res.nb_prime;
                            out.test = 0;
                        }                        ]]>
                    </code>
                </module>
            </defun>
            <connect-in port="lifted_res" place="place_lifted_res"/>
            <connect-in port="one" place="place_one"/>
            <connect-read port="implementation" place="place_implementation"/>
            <connect-read port="base_filename" place="place_base_filename"/>
            <connect-read port="function_name" place="place_function_name_reconstest"/>
            <connect-read port="needed_library" place="place_needed_library"/>
            <connect-out port="out" place="place_out"/>
        </transition>
    </net>
</defun>
